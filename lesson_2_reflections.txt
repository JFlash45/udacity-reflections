Initializing a repository (git init) adds a .git folder which contains metadata associated with the repository.  It must be done so that the appropriate data is in place when the repository is committed.

The staging area is used to prepare the files you want to commit to the repository.  The working directory may contain more files than you want to commit.  Staging them allows you to commit only the files you want.

How can you use the staging area to make sure you have one commit per logical change?
git status will help you see what is staged for a commit.  Running fit diff --staged will identify the changes in the staged files and the current repository so you can see exactly what will be committed.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
1) When making an experimental version of your code (addint an experimental feature, or
2) A bug fix may stay on the main branch, or
3) A version of code or documentation in another language

How do the diagrams help you visualize the branch structure?
It allows you to see the parent of each commit and which commits are reachable.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
One branch is merge into another such that they are on a common branch now.  The files between them are now common.  The diagram depicts this situation in that the new commit is the parent to both previous branches.  In other words, all previous commits regardless of branch are reachable from the new parent so long as the meet the reachability requirement.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic merging saves time by merging two commits that have no conflict between them.  It is accomplished via a simple command.  If a conflict does arise it won't commit and notifies you of said conflict.  This forces the user to resolve the conflict manually.  This requires extra effort but it ensures that the user makes the merge decision rather than an algorithm that may lead to mistakes in the merge an potentially unusable code or other nonsensical compilations.